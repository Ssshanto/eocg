# -*- coding: utf-8 -*-
"""Clipping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UJc_UKmnRT4MgHK-QiEJjQ_TNWT5WTL3
"""

!sudo apt update
!sudo apt install libcairo2-dev ffmpeg \
    texlive texlive-latex-extra texlive-fonts-extra \
    texlive-latex-recommended texlive-science \
    tipa libpango1.0-dev
!pip install manim
!pip install IPython --upgrade

from manim import *

# Commented out IPython magic to ensure Python compatibility.
# %%manim -p ClippingIntro
# from manim import *
# class ClippingIntro(Scene):
#     def construct(self):
#         text=Text("Pure mathemetics is, in its way,\nthe poetry of logical ideas.\n-Albert Einstein", font_size=25)
#         s1 = Circle(color=YELLOW, fill_opacity=1).scale(1.5)
#         line1=Line(color=BLACK, fill_opacity=1).scale(.5).rotate(PI*.15)
#         line2=Line(color=BLACK, fill_opacity=1).scale(.55).rotate(PI*-.15).shift(DOWN*.48)
#         triangle=Triangle(color=BLACK, fill_opacity=1).scale(.65).rotate(PI*.55).shift(DOWN*.28, RIGHT*1.05)
#         s2= Circle(color=BLACK, fill_opacity=1).scale(.15).shift(UP*.5)
#         g=Group(line1, line2)
#         g.color=BLACK
#         g.fill_opacity=1
#         g.shift(RIGHT*.95, UP*0.35)
#         pacman=Group(g, s1, triangle, s2)
#         pacman.scale(.75)
#         pacman.shift(LEFT*5)
#         self.add(pacman)
#         dot1 = Dot(point=LEFT, radius=0.08)
#         dot2 = Dot(point=ORIGIN)
#         dot3 = Dot(point=RIGHT)
#         self.play(Write(text), run_time=4)
#         self.wait(1)
#         self.play(text.animate.to_edge(UP))
#         self.add(dot1,dot3)
#        
#         self.play(pacman.animate.shift(RIGHT*3),run_time=1.5)
# 
#         self.remove(dot1)
#         self.wait(.50)
#         self.play(pacman.animate.shift(RIGHT*2),run_time=1.5)
#         self.remove(dot3)
#         self.wait(.50)
#         self.play(pacman.animate.shift(RIGHT*5),run_time=1.5)
#         #self.play(pacman.animate.shift(RIGHT*6),run_time=4)
#         self.remove(pacman,text)
# 
# 
#         rec=Rectangle()
#         text1=Text("Rectangular ViewPort", font_size=30, color=BLUE)
#         rect1=SurroundingRectangle(text1, color=YELLOW, buff=MED_LARGE_BUFF)
#         gpbox=VGroup(rect1, text1)
#         self.play(Create(gpbox), run_time=4)
#         self.play(gpbox.animate.to_edge(UP))
#         self.wait(2)
#         
#         self.play(Create(rec), run_time=4)
#         self.wait(3)
#         self.remove(gpbox)
#         #self.wait(2)
#         self.wait(3)
#         line=Line(color=RED)
#         line.shift(RIGHT*2)
#         
# 
#         dot1=Dot(point=np.array([0, 0, 0]))
#         dot2=Dot(point=np.array([0,3,0]))
#         line2=Line(dot1, dot2, color=RED)
# 
#         dot3=Dot(point=np.array([0.5, .5, 0]))
#         dot4=Dot(point=np.array([2,2,0]))
#         line3=Line(dot3, dot4,color=RED)
# 
#         dot5=Dot(point=np.array([-3, -3, 0]))
#         dot6=Dot(point=np.array([0,0,0]))
#         line4=Line(dot5, dot6, color=RED)
# 
#         dot7=Dot(point=np.array([-2, -2, 0]))
#         dot8=Dot(point=np.array([-4,-5,0]))
#         line5=Line(dot7, dot8, color=RED)
# 
#         dot9=Dot(point=np.array([1.5, 2, 0]))
#         dot10=Dot(point=np.array([3.5,7,0]))
#         line6=Line(dot9, dot10, color=RED)
# 
# 
#         self.add(line, line2, line3, line4, line5, line6)
# 
#         self.wait(3)
#         self.remove(line, line2, line3, line4, line5, line6)
#         d1=Dot()
#         d1.shift(RIGHT*1)
#         d2=Dot()
#         d2.shift(RIGHT*2)
#         line=Line(d1, d2, color=GREEN)
#         self.add(line)
# 
#         dot1=Dot(point=np.array([0, 0, 0]))
#         dot2=Dot(point=np.array([0,1,0]))
#         line2=Line(dot1, dot2, color=GREEN)
#         self.add(line2)
# 
#         dot3=Dot(point=np.array([0.5, .5, 0]))
#         dot4=Dot(point=np.array([1,1,0]))
#         line3=Line(dot3, dot4, color=GREEN)
# 
#         dot5=Dot(point=np.array([-1, -1, 0]))
#         dot6=Dot(point=np.array([0,0,0]))
#         line4=Line(dot5, dot6, color=GREEN)
# 
#         self.add(line3, line4)
#         self.wait(3)
#         text3=Text("Only rays inside the rectangular viewport are acceptable!", font_size=25, color=BLUE)
#         
#         text3.shift(np.array([-1,-2,0]))
#         self.play(Create(text3), run_time=4)
#       
# 
#         self.wait(3)
#         self.remove(line, line2, line3, line4)
#         #self.play(Uncreate(text2))
#         #self.wait(2)
#         self.play(Uncreate(text3))
#         self.wait(3)
# 
#         casper=Casper()
#         casper.scale(.5)
#         casper.shift(RIGHT*3, DOWN*2)
#         text2=Text("Case 1: Both endpoints are inside Rectangle Viewport", font_size=25)
#         text2.shift(UP*2)
#         self.play(Create(text2))
#         #self.play(text2.animate.to_edge(UP))
#         self.wait(2)
# 
#         dot5=Dot(point=np.array([.5, .5, 0]))
#         dot6=Dot(point=np.array([0,0,0]))
#         line4=Line(dot5, dot6, color=GREEN)
#         self.play(Create(line4))
#         self.wait(3)
#         self.play(Create(casper))
#         self.wait(2)
#         text3=Text("Trivial Accept!", font_size=25, color=BLUE)
#         
#         text3.shift(DOWN*1,RIGHT*4)
#         self.play(Create(text3))
#         self.wait(3)
#         self.remove(text3, text2, line4)
#         self.wait(4)
# 
#         text2=Text("Case 2: One Point Inside and the Other Outside", font_size=25)
#         text2.shift(UP*2)
#         self.play(Create(text2))
#         #self.play(text2.animate.to_edge(UP))
#         self.wait(2)
# 
#         dot5=Dot(point=np.array([.5, 0, 0]))
#         dot6=Dot(point=np.array([-3,0,0]))
#         line4=Line(dot5, dot6, color=RED)
#         self.add(line4)
#         self.wait(4)
#         
#         self.wait(2)
#         text3=Text("Must Clip!", font_size=25, color=BLUE)
#         text3.shift(DOWN*1,RIGHT*4)
#         self.play(Create(text3))
#         self.wait(3)
#         self.remove(text3, text2, line4)
#         self.wait(4)
# 
#         text2=Text("Case 3: Both Edge Points are outside", font_size=25)
#         text2.shift(UP*2)
#         self.play(Create(text2))
#         #self.play(text2.animate.to_edge(UP))
#         self.wait(2)
# 
#         dot5=Dot(point=np.array([-3.5, 1, 0]))
#         dot6=Dot(point=np.array([-3.5,2,0]))
#         line4=Line(dot5, dot6, color=RED)
#         self.add(line4)
#         self.wait(3)
#         
#         self.wait(2)
#         text3=Text("I'll ignore it!", font_size=25, color=BLUE)
#         text3.shift(DOWN*1,RIGHT*4)
#         self.play(Create(text3))
# 
#         self.wait(2)
#         self.remove(casper, line4, text3, text2)
#         self.wait(2)
#         self.play(Uncreate(rec))
# 
# 
#         text5=Text("Parameteric equation of line:\nFor each increasing value of t, our line is extended!", font_size=25, color=BLUE)
#         box66=SurroundingRectangle(text5, color=YELLOW, buff=MED_LARGE_BUFF)
#         v66=VGroup(box66, text5)
#         equation=Text("P(t)= p + t(P-p)")
#         v66.shift(np.array([1,2,0]))
#         self.play(Create(v66), run_time=4)
#         equation.shift(np.array([-2,0,0]))
#         self.play(Write(equation))
#         start = 0.0
#         arrow=Arrow(3 * LEFT, 3 * RIGHT)
#         arrow.shift(DOWN*1)
#         x_var = Variable(start, 't', num_decimal_places=3)
#         x_var.shift(DOWN*2)
#         self.add(x_var)
#         self.play(GrowArrow(arrow),x_var.tracker.animate.set_value(1), run_time=2, rate_func=linear)
#         self.wait(4)
#         self.remove(equation, x_var, arrow, v66)
#         self.wait(3)
# 
#         text=Text("Cohen-Sutherland\nLine Clipping", font_size=30)
#         text.shift(UP*3)
#         self.play(Write(text))
#         self.play(text.animate.to_edge(LEFT)) 
#         self.wait(3)
# 
# 
#         line1=Line(start=np.array([-1,0,0]), end=np.array([5, 0, 0]))
#         self.play(Create(line1), run_time=4)
# 
#         line2=Line(start=np.array([-1,2,0]), end=np.array([5, 2, 0]))
#         self.play(Create(line2), run_time=4)
# 
#         line3=Line(start=np.array([1,-2,0]), end=np.array([1, 4, 0]))
#         self.play(Create(line3), run_time=4)
# 
#         line4=Line(start=np.array([3,-2,0]), end=np.array([3, 4, 0]))
#         self.play(Create(line4), run_time=4)
# 
#         textp=Text("0000", font_size=20)
#         textp.shift(np.array([2, 1.5,0]))
#         
#         self.add(textp)
#         self.wait(3)
# 
#         text1=Text("0001", font_size=20)
#         text1.shift(np.array([-1, 1.5,0]))
#         
#         self.add(text1)
#         self.wait(3)
# 
#         text2=Text("0010", font_size=20)
#         text2.shift(np.array([4, 1.5,0]))
#         
#         self.add(text2)
#         self.wait(3)
# 
#         text3=Text("1000", font_size=20)
#         text3.shift(np.array([2, 3,0]))
#         
#         self.add(text3)
#         self.wait(3)
# 
#         text4=Text("1001", font_size=20)
#         text4.shift(np.array([-1, 3,0]))
#         
#         self.add(text4)
#         self.wait(3)
# 
#         text5=Text("1010", font_size=20)
#         text5.shift(np.array([4, 3,0]))
#         
#         self.add(text5)
#         self.wait(3)
# 
#         text6=Text("0100", font_size=20)
#         text6.shift(np.array([2, -1,0]))
#         
#         self.add(text6)
#         self.wait(3)
# 
#         text7=Text("0101", font_size=20)
#         text7.shift(np.array([-1, -1,0]))
#         
#         self.add(text7)
#         self.wait(3)
# 
#         text8=Text("0110", font_size=20)
#         text8.shift(np.array([4, -1,0]))
#         
#         self.add(text8)
#         self.wait(3)
#         text38=Text("The rectangular viewport is extended into 9 regions\neach with specific opcodes based on\ntheir position at top,bottom, right and left", font_size=20)
#         text38.shift(np.array([-3,-1,0]))
#         self.play(Create(text38), run_time=4)
#         self.wait(3)
#         self.remove(text, line1, line2, line3, line4, textp,text1, text2, text3, text4, text5, text6, text7, text8, text38)
# 
#         line5=Line(start=np.array([1.25,.95,0]), end=np.array([2.5,2,0]), color=GREEN)
#         self.play(Create(line5), run_time=4)
#         self.wait(3)
#         text1=Text("Below the Bottom edge?", font_size=20)
#         text1.shift(np.array([-4,0,0]))
#         self.add(text1)
#         line1=Line(start=np.array([-1,0,0]), end=np.array([5, 0, 0]))
#         self.play(Create(line1), run_time=4)
#         self.wait(3)
#         text2=Text("Above the top edge?", font_size=20)
#         text2.shift(np.array([-4,-.5,0]))
#         self.add(text2)
# 
#         line2=Line(start=np.array([-1,2,0]), end=np.array([5, 2, 0]))
#         self.play(Create(line2), run_time=4)
#         
# 
# 
# 
#         line3=Line(start=np.array([1,-2,0]), end=np.array([1, 4, 0]))
#         self.play(Create(line3), run_time=4)
#         self.wait(2)
#         text3=Text("To the left of left edge?", font_size=20)
#         text3.shift(np.array([-4,-1,0]))
#         self.add(text3)
#         self.wait(3)
#         
# 
#         line4=Line(start=np.array([3,-2,0]), end=np.array([3, 4, 0]))
#         self.play(Create(line4), run_time=4)
#         self.wait(3)
#         text4=Text("To the right of right edge?", font_size=20)
#         text4.shift(np.array([-4,-1.5,0]))
#         self.add(text4)
#         self.wait(3)
# 
#       
# 
#         text22=Text("Start=0000\nEnd=0000\nStart ⊕ End= 0000", font_size=20)
#         text22.shift(np.array([-4,2.5,0]))
#         self.add(text22)
#         self.wait(3)
# 
#         text33=Text("Trivially Accpet!", font_size=20)
#         text33.shift(np.array([-4,1.5,0]))
#         self.add(text33)
#         self.wait(3)
#         self.remove(line1, line2, line3, line4,text22, text33, line5, text1, text2, text3, text4)
#         self.wait(3)
#         line55=Line(start=np.array([-.65,.95,0]), end=np.array([-.65,-1.5,0]), color=GREEN)
#         self.play(Create(line55), run_time=4)
#         self.wait(3)
#         text1=Text("Below the Bottom edge?", font_size=20)
#         text1.shift(np.array([-4,0,0]))
#         self.add(text1)
#         line1=Line(start=np.array([-1,0,0]), end=np.array([5, 0, 0]))
#         self.play(Create(line1), run_time=4)
#         self.wait(3)
#         text2=Text("Above the top edge?", font_size=20)
#         text2.shift(np.array([-4,-.5,0]))
#         self.add(text2)
# 
#         line2=Line(start=np.array([-1,2,0]), end=np.array([5, 2, 0]))
#         self.play(Create(line2), run_time=4)
#         
# 
# 
# 
#       
#         text3=Text("To the left of left edge?", font_size=20)
#         text3.shift(np.array([-4,-1,0]))
#         line3=Line(start=np.array([1,-2,0]), end=np.array([1, 4, 0]))
#         self.play(Create(line3), run_time=4)
#         self.wait(2)
#         self.add(text3)
#         self.wait(3)
#         
# 
#         line4=Line(start=np.array([3,-2,0]), end=np.array([3, 4, 0]))
#         self.play(Create(line4), run_time=4)
#         self.wait(3)
#         text4=Text("To the right of right edge?", font_size=20)
#         text4.shift(np.array([-4,-1.5,0]))
#         self.add(text4)
#         self.wait(3)
# 
#         text5=Text("0001", font_size=20)
#         text5.shift(np.array([-1, 1.5,0]))
#         
#         self.add(text5)
#         self.wait(3)
#         text6=Text("0101", font_size=20)
#         text6.shift(np.array([-1, -1,0]))
#         
#         self.add(text6)
#         self.wait(3)
# 
#         text7=Text("Start=0001\nEnd=0101\nStart ⊕ End= 0100", font_size=20)
#         text7.shift(np.array([-4,2.5,0]))
#         self.add(text7)
#         self.wait(3)
# 
#         text8=Text("Trivially Reject!", font_size=20, color=RED)
#         text8.shift(np.array([-4,1.5,0]))
#         self.add(text8)
#         self.wait(3)
# 
#         self.remove(line55, line1,line2, line3, line4, text1, text2, text3, text4, text5, text6, text7,text8)
# 
#         self.wait(3)
# 
#         line5=Line(start=np.array([-.65,0.95,0]), end=np.array([2.5,1.5,0]), color=GREEN)
#         self.play(Create(line5), run_time=4)
#         self.wait(3)
#         text1=Text("Below the Bottom edge?", font_size=20)
#         text1.shift(np.array([-4,0,0]))
#         self.add(text1)
#         line1=Line(start=np.array([-1,0,0]), end=np.array([5, 0, 0]))
#         self.play(Create(line1), run_time=4)
#         self.wait(3)
#         text2=Text("Above the top edge?", font_size=20)
#         text2.shift(np.array([-4,-.5,0]))
#         self.add(text2)
# 
#         line2=Line(start=np.array([-1,2,0]), end=np.array([5, 2, 0]))
#         self.play(Create(line2), run_time=4)
#         
# 
# 
# 
#         line3=Line(start=np.array([1,-2,0]), end=np.array([1, 4, 0]))
#         self.play(Create(line3), run_time=4)
#         text3=Text("To the left of left edge?", font_size=20)
#         text3.shift(np.array([-4,-1,0]))
#         self.add(text3)
#         self.wait(3)
#         
# 
#         line4=Line(start=np.array([3,-2,0]), end=np.array([3, 4, 0]))
#         self.play(Create(line4), run_time=4)
#         self.wait(3)
#         text4=Text("To the right of right edge?", font_size=20)
#         text4.shift(np.array([-4,-1.5,0]))
#         self.add(text4)
#         self.wait(3)
# 
#         text5=Text("0001", font_size=20)
#         text5.shift(np.array([-1, 1.5,0]))
#         
#         self.add(text5)
#         self.wait(3)
# 
#         text6=Text("0000", font_size=20)
#         text6.shift(np.array([2, 1.5,0]))
#         
#         self.add(text6)
#         self.wait(3)
# 
#         text7=Text("Start=0001\nEnd=0000\nStart ⊕ End= 1", font_size=20)
#         text7.shift(np.array([-4,2.5,0]))
#         self.add(text7)
#         self.wait(3)
# 
#         text8=Text("How to Partially Clip?", font_size=20, color=RED)
#         text8.shift(np.array([-4,1.5,0]))
#         self.add(text8)
#         self.wait(3)
# 
#         self.remove(text1, text2, text3, text4, text8)
#         self.wait(3)
#         
#         self.remove(line1, line2, line3, line4)
#         self.wait(3)
# 
#         rectangle=Rectangle()
#         rectangle.shift(np.array([2,1.5,0]))
#         self.add(rectangle)
#         self.wait(3)
# 
#         text1=Text("Xmin, Ymin", font_size=20)
#         text1.shift(np.array([-1.25,0,0]))
#         self.add(text1)
#         
#         text2=Text("Xmax, Ymin", font_size=20)
#         text2.shift(np.array([5,0,0]))
#         self.add(text2)
# 
#         text3=Text("Xmin, Ymax", font_size=20)
#         text3.shift(np.array([-1.25,3,0]))
#         self.add(text3)
# 
#         text4=Text("Xmax, Ymax", font_size=20)
#         text4.shift(np.array([5,3,0]))
#         self.add(text4)
# 
#         text4=Text("Edge of the Clipped Side: Xmin, Y", font_size=20, color=GREEN)
#         text4.shift(np.array([-4,-1.5,0]))
#         self.add(text4)
# 
#         text5=Text("Ynew-Yold=Slope(Xnew- Xold)\n", font_size=20, color=YELLOW)
#         text5.shift(np.array([-4,-2,0]))
#         self.add(text5)
#         self.wait(3)
# 
#         self.remove(line5)
#         self.wait(2)
# 
#         line5=Line(start=np.array([0,0.95,0]), end=np.array([2.5,1.5,0]), color=RED)
#         self.add(line5)
#         self.wait(2)
# 
#         text5=Text("Check Opcodes Again!", font_size=20)
#         text5.shift(np.array([-4,-2.5,0]))
#         self.add(text5)
#         self.wait(3)
# 
#       
# 
# 
# 
#       
# 
# 
# 
#       
# 
# 
#       
# 
# 
#           
#         self.wait(5)
#

# Commented out IPython magic to ensure Python compatibility.
# %%manim -p rectangleview
# from manim import *
# 
# class Casper(VGroup):
#     def __init__(self):
#         super().__init__()
#         circle1 = Circle(color=BLUE, fill_opacity=.95)
#         circle2= Circle(color=WHITE, fill_opacity=1)
#         circle3= Circle(color=WHITE, fill_opacity=1)
#         square = Square()
#         triangle = Triangle(color=LIGHT_BROWN, fill_opacity=1)
#         triangle2 = Triangle()
#         
#         circle1.width=2
#         circle1.thickness=3
# 
#         circle2.scale(0.2)
#         circle2.set_stroke( width=1.25)
#         circle2.shift(LEFT* .5)
# 
#         
#         circle3.scale(0.2)
#         circle3.set_stroke( width=1.25)
#         circle3.shift(RIGHT* .5)
# 
#         circle4 = Circle(color=BLACK, fill_opacity=.75)
#         circle4.scale(0.155)
#         circle4.set_stroke( width=1.25)
#         circle4.shift(LEFT* .55)
# 
#         circle5=Circle(color=BLACK, fill_opacity=.75)
#         circle5.scale(0.155)
#         circle5.set_stroke( width=1.25)
#         circle5.shift(RIGHT* .45)
#         
#         square.shift(DOWN *1.75)
#         square.scale(.75)
# 
#         triangle.shift(UP *.65, RIGHT *.42)
#         triangle.scale(.95)
#         triangle.rotate(1.5)
#         triangle.border=2
# 
#         triangle2.shift( DOWN* 2)
#         triangle2.rotate(PI)
#         triangle2.scale(.45)
# 
#         smile = Arc(angle=.75*PI, radius=.2)    
#         smile.rotate(1.15*PI)
#         smile.shift(DOWN * .65)   
# 
#         
#         a = [2, 0, 0]
#         b = [0, 1.75, 0]
#         c = [0, 0, 1.75]
#         
#         ap1 = ArcPolygon(a, b, c, radius=2, color=BLUE, fill_opacity=.75)
#         
#         ap_group = VGroup(ap1).arrange()
#         ap_group.shift(DOWN * 1.75)
#         ap_group.rotate( 1.65* PI * .75)
# 
#         self.add(ap_group, triangle2, circle1, circle2, circle3, circle4, circle5, triangle, smile)
# 
# 
# class rectangleview(Scene):
#   def construct(self):
#      rec=Rectangle()
#      text1=Text("Rectangular ViewPort", font_size=30, color=BLUE)
#      rect1=SurroundingRectangle(text1, color=YELLOW, buff=MED_LARGE_BUFF)
#      gpbox=VGroup(rect1, text1)
#      self.play(Create(gpbox), run_time=4)
#      self.play(gpbox.animate.to_edge(UP))
#      self.wait(2)
#      
#      self.play(Create(rec), run_time=4)
#      self.wait(3)
#      self.remove(gpbox)
#      #self.wait(2)
#      self.wait(3)
#      line=Line(color=RED)
#      line.shift(RIGHT*2)
#      
# 
#      dot1=Dot(point=np.array([0, 0, 0]))
#      dot2=Dot(point=np.array([0,3,0]))
#      line2=Line(dot1, dot2, color=RED)
# 
#      dot3=Dot(point=np.array([0.5, .5, 0]))
#      dot4=Dot(point=np.array([2,2,0]))
#      line3=Line(dot3, dot4,color=RED)
# 
#      dot5=Dot(point=np.array([-3, -3, 0]))
#      dot6=Dot(point=np.array([0,0,0]))
#      line4=Line(dot5, dot6, color=RED)
# 
#      dot7=Dot(point=np.array([-2, -2, 0]))
#      dot8=Dot(point=np.array([-4,-5,0]))
#      line5=Line(dot7, dot8, color=RED)
# 
#      dot9=Dot(point=np.array([1.5, 2, 0]))
#      dot10=Dot(point=np.array([3.5,7,0]))
#      line6=Line(dot9, dot10, color=RED)
# 
# 
#      self.add(line, line2, line3, line4, line5, line6)
# 
#      self.wait(3)
#      self.remove(line, line2, line3, line4, line5, line6)
#      d1=Dot()
#      d1.shift(RIGHT*1)
#      d2=Dot()
#      d2.shift(RIGHT*2)
#      line=Line(d1, d2, color=GREEN)
#      self.add(line)
# 
#      dot1=Dot(point=np.array([0, 0, 0]))
#      dot2=Dot(point=np.array([0,1,0]))
#      line2=Line(dot1, dot2, color=GREEN)
#      self.add(line2)
# 
#      dot3=Dot(point=np.array([0.5, .5, 0]))
#      dot4=Dot(point=np.array([1,1,0]))
#      line3=Line(dot3, dot4, color=GREEN)
# 
#      dot5=Dot(point=np.array([-1, -1, 0]))
#      dot6=Dot(point=np.array([0,0,0]))
#      line4=Line(dot5, dot6, color=GREEN)
# 
#      self.add(line3, line4)
#      self.wait(3)
#      text3=Text("Only rays inside the rectangular viewport are acceptable!", font_size=25, color=BLUE)
#     
#      text3.shift(np.array([-1,-2,0]))
#      self.play(Create(text3), run_time=4)
#    
# 
#      self.wait(3)
#      self.remove(line, line2, line3, line4)
#      #self.play(Uncreate(text2))
#      #self.wait(2)
#      self.play(Uncreate(text3))
#      self.wait(3)
# 
#      casper=Casper()
#      casper.scale(.5)
#      casper.shift(RIGHT*3, DOWN*2)
#      text2=Text("Case 1: Both endpoints are inside Rectangle Viewport", font_size=25)
#      text2.shift(UP*2)
#      self.play(Create(text2))
#      #self.play(text2.animate.to_edge(UP))
#      self.wait(2)
# 
#      dot5=Dot(point=np.array([.5, .5, 0]))
#      dot6=Dot(point=np.array([0,0,0]))
#      line4=Line(dot5, dot6, color=GREEN)
#      self.play(Create(line4))
#      self.wait(3)
#      self.play(Create(casper))
#      self.wait(2)
#      text3=Text("Trivial Accept!", font_size=25, color=BLUE)
#      
#      text3.shift(DOWN*1,RIGHT*4)
#      self.play(Create(text3))
#      self.wait(3)
#      self.remove(text3, text2, line4)
#      self.wait(4)
# 
#      text2=Text("Case 2: One Point Inside and the Other Outside", font_size=25)
#      text2.shift(UP*2)
#      self.play(Create(text2))
#      #self.play(text2.animate.to_edge(UP))
#      self.wait(2)
# 
#      dot5=Dot(point=np.array([.5, 0, 0]))
#      dot6=Dot(point=np.array([-3,0,0]))
#      line4=Line(dot5, dot6, color=RED)
#      self.add(line4)
#      self.wait(4)
#      
#      self.wait(2)
#      text3=Text("Must Clip!", font_size=25, color=BLUE)
#      text3.shift(DOWN*1,RIGHT*4)
#      self.play(Create(text3))
#      self.wait(3)
#      self.remove(text3, text2, line4)
#      self.wait(4)
# 
#      text2=Text("Case 3: Both Edge Points are outside", font_size=25)
#      text2.shift(UP*2)
#      self.play(Create(text2))
#      #self.play(text2.animate.to_edge(UP))
#      self.wait(2)
# 
#      dot5=Dot(point=np.array([-3.5, 1, 0]))
#      dot6=Dot(point=np.array([-3.5,2,0]))
#      line4=Line(dot5, dot6, color=RED)
#      self.add(line4)
#      self.wait(3)
#      
#      self.wait(2)
#      text3=Text("I'll ignore it!", font_size=25, color=BLUE)
#      text3.shift(DOWN*1,RIGHT*4)
#      self.play(Create(text3))
# 
#      self.wait(2)
#      self.remove(casper, line4, text3, text2)
#      self.wait(2)
#      self.play(Uncreate(rec))
#      
# 
# 
#      self.wait(5)
#    
# 
# 
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%manim -p Cohen
# from manim import *
# class Cohen(Scene):
#   def construct(self):
# 
#     text5=Text("Parameteric equation of line:\nFor each increasing value of t, our line is extended!", font_size=25, color=BLUE)
#     box66=SurroundingRectangle(text5, color=YELLOW, buff=MED_LARGE_BUFF)
#     v66=VGroup(box66, text5)
#     equation=Text("P(t)= p + t(P-p)")
#     v66.shift(np.array([1,2,0]))
#     self.play(Create(v66), run_time=4)
#     equation.shift(np.array([-2,0,0]))
#     self.play(Write(equation))
#     start = 0.0
#     arrow=Arrow(3 * LEFT, 3 * RIGHT)
#     arrow.shift(DOWN*1)
#     x_var = Variable(start, 't', num_decimal_places=3)
#     x_var.shift(DOWN*2)
#     self.add(x_var)
#     self.play(GrowArrow(arrow),x_var.tracker.animate.set_value(1), run_time=2, rate_func=linear)
#     self.wait(4)
#     self.remove(equation, x_var, arrow, v66)
#     self.wait(3)
# 
#     text=Text("Cohen-Sutherland\nLine Clipping", font_size=30)
#     text.shift(UP*3)
#     self.play(Write(text))
#     self.play(text.animate.to_edge(LEFT)) 
#     self.wait(3)
# 
# 
#     line1=Line(start=np.array([-1,0,0]), end=np.array([5, 0, 0]))
#     self.play(Create(line1), run_time=4)
# 
#     line2=Line(start=np.array([-1,2,0]), end=np.array([5, 2, 0]))
#     self.play(Create(line2), run_time=4)
# 
#     line3=Line(start=np.array([1,-2,0]), end=np.array([1, 4, 0]))
#     self.play(Create(line3), run_time=4)
# 
#     line4=Line(start=np.array([3,-2,0]), end=np.array([3, 4, 0]))
#     self.play(Create(line4), run_time=4)
# 
#     textp=Text("0000", font_size=20)
#     textp.shift(np.array([2, 1.5,0]))
#     
#     self.add(textp)
#     self.wait(3)
# 
#     text1=Text("0001", font_size=20)
#     text1.shift(np.array([-1, 1.5,0]))
#     
#     self.add(text1)
#     self.wait(3)
# 
#     text2=Text("0010", font_size=20)
#     text2.shift(np.array([4, 1.5,0]))
#     
#     self.add(text2)
#     self.wait(3)
# 
#     text3=Text("1000", font_size=20)
#     text3.shift(np.array([2, 3,0]))
#     
#     self.add(text3)
#     self.wait(3)
# 
#     text4=Text("1001", font_size=20)
#     text4.shift(np.array([-1, 3,0]))
#     
#     self.add(text4)
#     self.wait(3)
# 
#     text5=Text("1010", font_size=20)
#     text5.shift(np.array([4, 3,0]))
#     
#     self.add(text5)
#     self.wait(3)
# 
#     text6=Text("0100", font_size=20)
#     text6.shift(np.array([2, -1,0]))
#     
#     self.add(text6)
#     self.wait(3)
# 
#     text7=Text("0101", font_size=20)
#     text7.shift(np.array([-1, -1,0]))
#     
#     self.add(text7)
#     self.wait(3)
# 
#     text8=Text("0110", font_size=20)
#     text8.shift(np.array([4, -1,0]))
#     
#     self.add(text8)
#     self.wait(3)
#     text38=Text("The rectangular viewport is extended into 9 regions\neach with specific opcodes based on\ntheir position at top,bottom, right and left", font_size=20)
#     text38.shift(np.array([-3,-1,0]))
#     self.play(Create(text38), run_time-4)
#     self.wait(3)
#     self.remove(text, line1, line2, line3, line4, textp,text1, text2, text3, text4, text5, text6, text7, text8, text38)
# 
# 
#     self.wait(5)
#

# Commented out IPython magic to ensure Python compatibility.
# %%manim -p CohenVisual
# from manim import *
# class CohenVisual(Scene):
#   def construct(self):
# 
#     line5=Line(start=np.array([1.25,.95,0]), end=np.array([2.5,2,0]), color=GREEN)
#     self.play(Create(line5), run_time=4)
#     self.wait(3)
#     text1=Text("Below the Bottom edge?", font_size=20)
#     text1.shift(np.array([-4,0,0]))
#     self.add(text1)
#     line1=Line(start=np.array([-1,0,0]), end=np.array([5, 0, 0]))
#     self.play(Create(line1), run_time=4)
#     self.wait(3)
#     text2=Text("Above the top edge?", font_size=20)
#     text2.shift(np.array([-4,-.5,0]))
#     self.add(text2)
# 
#     line2=Line(start=np.array([-1,2,0]), end=np.array([5, 2, 0]))
#     self.play(Create(line2), run_time=4)
#     
# 
# 
# 
#     line3=Line(start=np.array([1,-2,0]), end=np.array([1, 4, 0]))
#     self.play(Create(line3), run_time=4)
#     self.wait(2)
#     text3=Text("To the left of left edge?", font_size=20)
#     text3.shift(np.array([-4,-1,0]))
#     self.add(text3)
#     self.wait(3)
#     
# 
#     line4=Line(start=np.array([3,-2,0]), end=np.array([3, 4, 0]))
#     self.play(Create(line4), run_time=4)
#     self.wait(3)
#     text4=Text("To the right of right edge?", font_size=20)
#     text4.shift(np.array([-4,-1.5,0]))
#     self.add(text4)
#     self.wait(3)
# 
#    
# 
#     text22=Text("Start=0000\nEnd=0000\nStart ⊕ End= 0000", font_size=20)
#     text22.shift(np.array([-4,2.5,0]))
#     self.add(text22)
#     self.wait(3)
# 
#     text33=Text("Trivially Accpet!", font_size=20)
#     text33.shift(np.array([-4,1.5,0]))
#     self.add(text33)
#     self.wait(3)
#     self.remove(line1, line2, line3, line4,text22, text33, line5, text1, text2, text3, text4)
# 
# 
#     
# 
#     self.wait(3)

# Commented out IPython magic to ensure Python compatibility.
# %%manim -p CohenVisual
# from manim import *
# class CohenVisual(Scene):
#   def construct(self):
# 
#     line55=Line(start=np.array([-.65,.95,0]), end=np.array([-.65,-1.5,0]), color=GREEN)
#     self.play(Create(line55), run_time=4)
#     self.wait(3)
#     text1=Text("Below the Bottom edge?", font_size=20)
#     text1.shift(np.array([-4,0,0]))
#     self.add(text1)
#     line1=Line(start=np.array([-1,0,0]), end=np.array([5, 0, 0]))
#     self.play(Create(line1), run_time=4)
#     self.wait(3)
#     text2=Text("Above the top edge?", font_size=20)
#     text2.shift(np.array([-4,-.5,0]))
#     self.add(text2)
# 
#     line2=Line(start=np.array([-1,2,0]), end=np.array([5, 2, 0]))
#     self.play(Create(line2), run_time=4)
#     
# 
# 
# 
#    
#     text3=Text("To the left of left edge?", font_size=20)
#     text3.shift(np.array([-4,-1,0]))
#     line3=Line(start=np.array([1,-2,0]), end=np.array([1, 4, 0]))
#     self.play(Create(line3), run_time=4)
#     self.wait(2)
#     self.add(text3)
#     self.wait(3)
#     
# 
#     line4=Line(start=np.array([3,-2,0]), end=np.array([3, 4, 0]))
#     self.play(Create(line4), run_time=4)
#     self.wait(3)
#     text4=Text("To the right of right edge?", font_size=20)
#     text4.shift(np.array([-4,-1.5,0]))
#     self.add(text4)
#     self.wait(3)
# 
#     text5=Text("0001", font_size=20)
#     text5.shift(np.array([-1, 1.5,0]))
#     
#     self.add(text5)
#     self.wait(3)
#     text6=Text("0101", font_size=20)
#     text6.shift(np.array([-1, -1,0]))
#     
#     self.add(text6)
#     self.wait(3)
# 
#     text7=Text("Start=0001\nEnd=0101\nStart ⊕ End= 0100", font_size=20)
#     text7.shift(np.array([-4,2.5,0]))
#     self.add(text7)
#     self.wait(3)
# 
#     text8=Text("Trivially Reject!", font_size=20, color=RED)
#     text8.shift(np.array([-4,1.5,0]))
#     self.add(text8)
#     self.wait(3)
# 
#     self.remove(line55, line1,line2, line3, line4, text1, text2, text3, text4, text5, text6, text7,text8)
# 
# 
# 
#     
# 
#     self.wait()

# Commented out IPython magic to ensure Python compatibility.
# %%manim -p CohenVisual
# from manim import *
# class CohenVisual(Scene):
#   def construct(self):
# 
#     line5=Line(start=np.array([-.65,0.95,0]), end=np.array([2.5,1.5,0]), color=GREEN)
#     self.play(Create(line5), run_time=4)
#     self.wait(3)
#     text1=Text("Below the Bottom edge?", font_size=20)
#     text1.shift(np.array([-4,0,0]))
#     self.add(text1)
#     line1=Line(start=np.array([-1,0,0]), end=np.array([5, 0, 0]))
#     self.play(Create(line1), run_time=4)
#     self.wait(3)
#     text2=Text("Above the top edge?", font_size=20)
#     text2.shift(np.array([-4,-.5,0]))
#     self.add(text2)
# 
#     line2=Line(start=np.array([-1,2,0]), end=np.array([5, 2, 0]))
#     self.play(Create(line2), run_time=4)
#     
# 
# 
# 
#     line3=Line(start=np.array([1,-2,0]), end=np.array([1, 4, 0]))
#     self.play(Create(line3), run_time=4)
#     text3=Text("To the left of left edge?", font_size=20)
#     text3.shift(np.array([-4,-1,0]))
#     self.add(text3)
#     self.wait(3)
#     
# 
#     line4=Line(start=np.array([3,-2,0]), end=np.array([3, 4, 0]))
#     self.play(Create(line4), run_time=4)
#     self.wait(3)
#     text4=Text("To the right of right edge?", font_size=20)
#     text4.shift(np.array([-4,-1.5,0]))
#     self.add(text4)
#     self.wait(3)
# 
#     text5=Text("0001", font_size=20)
#     text5.shift(np.array([-1, 1.5,0]))
#     
#     self.add(text5)
#     self.wait(3)
# 
#     text6=Text("0000", font_size=20)
#     text6.shift(np.array([2, 1.5,0]))
#     
#     self.add(text6)
#     self.wait(3)
# 
#     text7=Text("Start=0001\nEnd=0000\nStart ⊕ End= 1", font_size=20)
#     text7.shift(np.array([-4,2.5,0]))
#     self.add(text7)
#     self.wait(3)
# 
#     text8=Text("How to Partially Clip?", font_size=20, color=RED)
#     text8.shift(np.array([-4,1.5,0]))
#     self.add(text8)
#     self.wait(3)
# 
#     self.remove(text1, text2, text3, text4, text8)
#     self.wait(3)
#     
#     self.remove(line1, line2, line3, line4)
#     self.wait(3)
# 
#     rectangle=Rectangle()
#     rectangle.shift(np.array([2,1.5,0]))
#     self.add(rectangle)
#     self.wait(3)
# 
#     text1=Text("Xmin, Ymin", font_size=20)
#     text1.shift(np.array([-1.25,0,0]))
#     self.add(text1)
#     
#     text2=Text("Xmax, Ymin", font_size=20)
#     text2.shift(np.array([5,0,0]))
#     self.add(text2)
# 
#     text3=Text("Xmin, Ymax", font_size=20)
#     text3.shift(np.array([-1.25,3,0]))
#     self.add(text3)
# 
#     text4=Text("Xmax, Ymax", font_size=20)
#     text4.shift(np.array([5,3,0]))
#     self.add(text4)
# 
#     text4=Text("Edge of the Clipped Side: Xmin, Y", font_size=20, color=GREEN)
#     text4.shift(np.array([-4,-1.5,0]))
#     self.add(text4)
# 
#     text5=Text("Ynew-Yold=Slope(Xnew- Xold)\n", font_size=20, color=YELLOW)
#     text5.shift(np.array([-4,-2,0]))
#     self.add(text5)
#     self.wait(3)
# 
#     self.remove(line5)
#     self.wait(2)
# 
#     line5=Line(start=np.array([0,0.95,0]), end=np.array([2.5,1.5,0]), color=RED)
#     self.add(line5)
#     self.wait(2)
# 
#     text5=Text("Check Opcodes Again!", font_size=20)
#     text5.shift(np.array([-4,-2.5,0]))
#     self.add(text5)
#     self.wait(3)
# 
#     
# 
#     self.wait(5)

