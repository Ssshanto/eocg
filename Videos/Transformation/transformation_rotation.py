# -*- coding: utf-8 -*-
"""Transformation_Rotation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bw_OAHdKFE6CyVIfWuPlzTk09Kykp-lu
"""

!sudo apt update
!sudo apt install libcairo2-dev ffmpeg \
    texlive texlive-latex-extra texlive-fonts-extra \
    texlive-latex-recommended texlive-science \
    tipa libpango1.0-dev
!pip install manim
!pip install IPython --upgrade

from manim import *

# Commented out IPython magic to ensure Python compatibility.
# %%manim -p Transform
# from manim import *
# 
# class Casper(VGroup):
#     def __init__(self):
#         super().__init__()
#         circle1 = Circle(color=BLUE, fill_opacity=.95)
#         circle2= Circle(color=WHITE, fill_opacity=1)
#         circle3= Circle(color=WHITE, fill_opacity=1)
#         square = Square()
#         triangle = Triangle(color=LIGHT_BROWN, fill_opacity=1)
#         triangle2 = Triangle()
#         
#         circle1.width=2
#         circle1.thickness=3
# 
#         circle2.scale(0.2)
#         circle2.set_stroke( width=1.25)
#         circle2.shift(LEFT* .5)
# 
#         
#         circle3.scale(0.2)
#         circle3.set_stroke( width=1.25)
#         circle3.shift(RIGHT* .5)
# 
#         circle4 = Circle(color=BLACK, fill_opacity=.75)
#         circle4.scale(0.155)
#         circle4.set_stroke( width=1.25)
#         circle4.shift(LEFT* .55)
# 
#         circle5=Circle(color=BLACK, fill_opacity=.75)
#         circle5.scale(0.155)
#         circle5.set_stroke( width=1.25)
#         circle5.shift(RIGHT* .45)
#         
#         square.shift(DOWN *1.75)
#         square.scale(.75)
# 
#         triangle.shift(UP *.65, RIGHT *.42)
#         triangle.scale(.95)
#         triangle.rotate(1.5)
#         triangle.border=2
# 
#         triangle2.shift( DOWN* 2)
#         triangle2.rotate(PI)
#         triangle2.scale(.45)
# 
#         smile = Arc(angle=.75*PI, radius=.2)    
#         smile.rotate(1.15*PI)
#         smile.shift(DOWN * .65)   
# 
#         
#         a = [2, 0, 0]
#         b = [0, 1.75, 0]
#         c = [0, 0, 1.75]
#         
#         ap1 = ArcPolygon(a, b, c, radius=2, color=BLUE, fill_opacity=.75)
#         
#         ap_group = VGroup(ap1).arrange()
#         ap_group.shift(DOWN * 1.75)
#         ap_group.rotate( 1.65* PI * .75)
# 
#         self.add(ap_group, triangle2, circle1, circle2, circle3, circle4, circle5, triangle, smile)
# 
# class Transform(Scene):
#     def construct(self):
#       c=Casper()
#       text=Text("Transformation", font_size=40)
#       self.play(text.animate.to_edge(UP))
#       text2=Text("Scaling", font_size=25)
#       self.play(text2.animate.shift(UP*2.5))
#       c.scale(.45)
#       c.shift(ORIGIN)
#       self.play(Create(c))
#       self.play(c.animate.scale(2))
#       text3=Text("But how does it work?",font_size=20, color=BLUE)
#       box = SurroundingRectangle(text3, color=YELLOW, buff=MED_LARGE_BUFF)
#       group=VGroup(box,text3)
#       group.shift(DOWN*3)
#       self.play(Create(group), run_time=3)
# 
# 
# 
#       self.wait(3)
#

# Commented out IPython magic to ensure Python compatibility.
# %%manim -p Transform2
# from manim import *
# 
# class Casper(VGroup):
#     def __init__(self):
#         super().__init__()
#         circle1 = Circle(color=BLUE, fill_opacity=.95)
#         circle2= Circle(color=WHITE, fill_opacity=1)
#         circle3= Circle(color=WHITE, fill_opacity=1)
#         square = Square()
#         triangle = Triangle(color=LIGHT_BROWN, fill_opacity=1)
#         triangle2 = Triangle()
#         
#         circle1.width=2
#         circle1.thickness=3
# 
#         circle2.scale(0.2)
#         circle2.set_stroke( width=1.25)
#         circle2.shift(LEFT* .5)
# 
#         
#         circle3.scale(0.2)
#         circle3.set_stroke( width=1.25)
#         circle3.shift(RIGHT* .5)
# 
#         circle4 = Circle(color=BLACK, fill_opacity=.75)
#         circle4.scale(0.155)
#         circle4.set_stroke( width=1.25)
#         circle4.shift(LEFT* .55)
# 
#         circle5=Circle(color=BLACK, fill_opacity=.75)
#         circle5.scale(0.155)
#         circle5.set_stroke( width=1.25)
#         circle5.shift(RIGHT* .45)
#         
#         square.shift(DOWN *1.75)
#         square.scale(.75)
# 
#         triangle.shift(UP *.65, RIGHT *.42)
#         triangle.scale(.95)
#         triangle.rotate(1.5)
#         triangle.border=2
# 
#         triangle2.shift( DOWN* 2)
#         triangle2.rotate(PI)
#         triangle2.scale(.45)
# 
#         smile = Arc(angle=.75*PI, radius=.2)    
#         smile.rotate(1.15*PI)
#         smile.shift(DOWN * .65)   
# 
#         
#         a = [2, 0, 0]
#         b = [0, 1.75, 0]
#         c = [0, 0, 1.75]
#         
#         ap1 = ArcPolygon(a, b, c, radius=2, color=BLUE, fill_opacity=.75)
#         
#         ap_group = VGroup(ap1).arrange()
#         ap_group.shift(DOWN * 1.75)
#         ap_group.rotate( 1.65* PI * .75)
# 
#         self.add(ap_group, triangle2, circle1, circle2, circle3, circle4, circle5, triangle, smile)
# 
# class Transform2(Scene):
#     def construct(self):
#       c=Casper()
#       text=Text("Transformation", font_size=40)
#       self.play(text.animate.to_edge(UP))
#       text2=Text("Rotation", font_size=25, color=BLUE)
#       self.play(text2.animate.shift(UP*2.5))
#       c.scale(.45)
#       c.shift(ORIGIN)
#       self.play(Create(c))
#       self.play(c.animate.rotate(PI), run_time=4)
#       text3=Text("But how does it work?",font_size=20, color=WHITE)
#       box = BackgroundRectangle(text3, color=BLACK, buff=MED_LARGE_BUFF)
#       group=VGroup(box,text3)
#       group.shift(DOWN*3)
#       self.play(Create(group), run_time=3)
#       self.wait(2)
# 
#       number_plane = NumberPlane(
#             background_line_style={
#                 "stroke_color": TEAL,
#                 "stroke_width": 4,
#                 "stroke_opacity": 0.6
#             }
#         ).add_coordinates()
#       self.remove(text,text2)
#       self.wait(2)
#       self.play(group.animate.to_edge(UP))
#       self.wait(2)
#       self.play(Uncreate(c))
#       self.wait(2)
#       self.play(Create(number_plane), run_time=4)
#       self.wait(2)
#       cp=Casper()
#       cp.scale(.45)
#       cp.shift(ORIGIN)
#       self.play(Create(cp))
#       self.wait(3)
#       self.play(number_plane.animate.rotate(.25*PI), run_time=5)
#       self.wait(2)
#       text4=Text("For every transformation\nThe coordinate system updates itself according to your rotation!",font_size=20, color=WHITE)
#       box2 = BackgroundRectangle(text4, color=BLACK, buff=MED_LARGE_BUFF)
#       group2=VGroup(box2,text4)
#       group2.shift(DOWN*3)
#       self.play(Create(group2), run_time=4)
#       self.wait(3)
#       self.remove(group2,c,number_plane,cp,text3)
#       self.wait(2)
# 
#       number_plane = NumberPlane(
#             background_line_style={
#                 "stroke_color": TEAL,
#                 "stroke_width": 4,
#                 "stroke_opacity": 0.6
#             }
#         ).add_coordinates()
#       self.play(Create(number_plane), run_time=4)
#       self.wait(2)
#       arrow5=Arrow(start=np.array([0,0,0]), end=np.array([3,3,0]))
#       self.play(GrowArrow(arrow5),  run_time=3)
#       self.wait(2)
#       casp=Casper()
#       casp.shift(np.array([3,3,0]))
#       casp.scale(.5)
#       self.play(Create(casp))
#       self.wait(2)
#       self.remove(arrow5)
#       line1=Arrow(start=np.array([0,0,0]), end=np.array([3,3,0]), color=RED)
#       line2=Arrow(start=np.array([0,0,0]), end=np.array([-3,3,0]), color=GREEN)
#       self.wait(2)
#       self.add(line1)
#       text99=Text("Suppose Casper is at position 3,3 wants to\nrotate to -3,3. In that Case\nAngle Between Red line and Green line is 90 degrees.", font_size=20, color=BLUE)
#       box99=BackgroundRectangle(text99, color=BLACK,buff=MED_LARGE_BUFF)
#       gbox=VGroup(box99, text99)
#       gbox.shift(np.array([-3,-3,0]))
#       self.wait(2)
#       self.play(Create(gbox), run_time=4)
#       self.wait(2)
#       self.play(casp.animate.rotate(angle=.5*PI,about_point=ORIGIN), run_time=5)
#       self.wait(2)
#       self.add(line2)
#       self.wait(4)
#      
#       coordinate1=Text("X,Y", font_size=30)
#       coordinate1.shift(np.array([-3.5,3.5,0]))
#       coordinate2=Text("x,y", font_size=30)
#       coordinate2.shift(np.array([3.5,3.5,0]))
# 
#       coordinate3=Text("θ", font_size=30)
#       coordinate3.shift(np.array([1.25,.5,0]))
#       coordinate4=Text("90°", font_size=30)
#       coordinate4.shift(np.array([.5,1.5,0]))
# 
#       self.add(coordinate1,coordinate2,coordinate3,coordinate4)
#       self.wait(2)
#       self.play(Uncreate(casp))
#       self.wait(2)
# 
#       self.remove(gbox)
#       text99=Text("Using Projection:\nX=r cos (90° + θ)\nY=r sin (90° + θ)\nr=Distance of casper from origin", font_size=20, color=BLUE)
#       box99=BackgroundRectangle(text99, color=BLACK,buff=MED_LARGE_BUFF)
#       gbox=VGroup(box99, text99)
#       gbox.shift(np.array([-3,-3,0]))
#       
#       self.wait(2)
#       self.play(Create(gbox))
#       self.wait(3)
#       self.remove(line1,line2, coordinate1, coordinate2,coordinate3, coordinate4)
#       self.wait(2)
#       self.play(Uncreate(number_plane))
#       self.wait(2)
#       self.play(gbox.animate.to_edge(UP))
#       how=Text("How to easily represent it in more simple way?\nSimple!\nUse matrix multiplication to identify transformation", font_size=20)
#       bb=SurroundingRectangle(how, color=YELLOW, buff=MED_LARGE_BUFF)
#       gbox1=VGroup(bb,how)
#       gbox1.shift(np.array([-2,-0,0]))
#       z=Casper()
#       z.scale(.65)
#       z.shift(np.array([2,-1,0]))
#       self.play(Create(gbox1))
#       self.wait(2)
#       self.add(z)
#       self.wait(4)
#       self.remove(gbox)
#       self.wait(2)
#       self.play(gbox1.animate.to_edge(UP))
#       self.wait(2)
#       self.play(z.animate.to_edge(RIGHT))
#       self.wait(2)
#       ff=Text("Transformation!", font_size=25)
#       ff.shift(np.array([-2,0,0]))
#       self.add(ff)
#       self.wait(2)
#       m0 = Matrix([['X'], ['Y']])
#       m1 = Matrix([['x'], ['y']])
#       m2 = Matrix([["cosθ", "sinθ"], ["-sinθ", "cosθ"]])
#       g = Group(
#             m1,m2
#         ).arrange_in_grid(buff=0.5)
#       g.scale(.75)
#       g.shift(np.array([-2,-1,0]))
#       self.add(g)
# 
#       fff=Text("Final Matrix!", font_size=25)
#       fff.shift(np.array([2,0,0]))
#       self.add(fff)
#       self.wait(2)
#       m0.scale(.75)
#       m0.shift(np.array([2,-1,0]))
#       self.add(m0)
# 
#       
#       self.wait(2)
# 
# 
#       self.wait(3)
#       
#       self.wait(3)
#

# Commented out IPython magic to ensure Python compatibility.
# %%manim -p Transform3
# from manim import *
# 
# class Casper(VGroup):
#     def __init__(self):
#         super().__init__()
#         circle1 = Circle(color=BLUE, fill_opacity=.95)
#         circle2= Circle(color=WHITE, fill_opacity=1)
#         circle3= Circle(color=WHITE, fill_opacity=1)
#         square = Square()
#         triangle = Triangle(color=LIGHT_BROWN, fill_opacity=1)
#         triangle2 = Triangle()
#         
#         circle1.width=2
#         circle1.thickness=3
# 
#         circle2.scale(0.2)
#         circle2.set_stroke( width=1.25)
#         circle2.shift(LEFT* .5)
# 
#         
#         circle3.scale(0.2)
#         circle3.set_stroke( width=1.25)
#         circle3.shift(RIGHT* .5)
# 
#         circle4 = Circle(color=BLACK, fill_opacity=.75)
#         circle4.scale(0.155)
#         circle4.set_stroke( width=1.25)
#         circle4.shift(LEFT* .55)
# 
#         circle5=Circle(color=BLACK, fill_opacity=.75)
#         circle5.scale(0.155)
#         circle5.set_stroke( width=1.25)
#         circle5.shift(RIGHT* .45)
#         
#         square.shift(DOWN *1.75)
#         square.scale(.75)
# 
#         triangle.shift(UP *.65, RIGHT *.42)
#         triangle.scale(.95)
#         triangle.rotate(1.5)
#         triangle.border=2
# 
#         triangle2.shift( DOWN* 2)
#         triangle2.rotate(PI)
#         triangle2.scale(.45)
# 
#         smile = Arc(angle=.75*PI, radius=.2)    
#         smile.rotate(1.15*PI)
#         smile.shift(DOWN * .65)   
# 
#         
#         a = [2, 0, 0]
#         b = [0, 1.75, 0]
#         c = [0, 0, 1.75]
#         
#         ap1 = ArcPolygon(a, b, c, radius=2, color=BLUE, fill_opacity=.75)
#         
#         ap_group = VGroup(ap1).arrange()
#         ap_group.shift(DOWN * 1.75)
#         ap_group.rotate( 1.65* PI * .75)
# 
#         self.add(ap_group, triangle2, circle1, circle2, circle3, circle4, circle5, triangle, smile)
# 
# class Transform3(Scene):
#     def construct(self):
#       cpp=Casper()
#       cpp.scale(.45)
#       cpp.shift(ORIGIN)
#       self.play(Create(cpp))
#       self.play(cpp.animate.to_edge(UP), run_time=3)
#       self.play(cpp.animate.to_edge(RIGHT), run_time=3)
#       st=Text("Old Coordinate: x, y", font_size=20)
#       st.shift(UP*2, LEFT*3)
#       self.play(Write(st))
#       st2=Text("New Coordinate: x', y'", font_size=20)
#       st2.shift(UP*1, LEFT*3)
#       self.play(Write(st2))
#       st3=Text("In That Case:\nx'= Scaling * x y'=Scaling * y", font_size=20)
#       box3 = SurroundingRectangle(st3, color=YELLOW, buff=MED_LARGE_BUFF)
#       group3=VGroup(box3,st3)
#       group3.shift(np.array([-3,-1,0]))
#       self.play(Create(group3), run_time=4)
#       self.wait(2)
#       self.remove(st,st2)
#       self.wait(2)
#       self.play(group3.animate.to_edge(UP))
#       var = 0.5
#       on_screen_var = Variable(var, Text("Scale X"), num_decimal_places=3)
# 
#       # You can also change the colours for the label and value
#       on_screen_var.label.set_color(RED)
#       on_screen_var.value.set_color(GREEN)
#       on_screen_var.scale(.75)
#       on_screen_var.shift(np.array([-1,-1,0]))
# 
#       self.play(Write(on_screen_var))
#       # The above line will just display the variable with
#       # its initial value on the screen. If you also wish to
#       # update it, you can do so by accessing the `tracker` attribute
#       self.wait()
#       var_tracker1 = on_screen_var.tracker
#       var = 5
#       #self.play(var_tracker1.animate.set_value(var))
#       self.wait()
# 
#       int_var = .5
#       on_screen_int_var = Variable(
#           int_var, Text("Scale Y"), num_decimal_places=3
#       ).next_to(on_screen_var, DOWN)
#       on_screen_int_var.label.set_color(RED)
#       on_screen_int_var.value.set_color(GREEN)
#       on_screen_int_var.scale(.75)
#       on_screen_int_var.shift(np.array([0,-.25,0]))
# 
#       self.play(Write(on_screen_int_var))
#       self.wait(2)
#       var_tracker = on_screen_int_var.tracker
#       var = 5
#       cpp.shift(LEFT*1, DOWN*1)
#       self.wait(2)
#       self.play(var_tracker.animate.set_value(var),var_tracker1.animate.set_value(var), cpp.animate.scale(2))
#       self.wait(3)
#       self.remove(on_screen_int_var,on_screen_var)
#       self.wait(2)
#       text5=Text("Matrix Representation: ", font_size=25)
#       text5.shift(np.array([-2,.5,0]))
#       self.play(Write(text5))
#       self.wait(2)
#       m0 = Matrix([['X'], ['Y']])
#       m1 = Matrix([['x'], ['y']])
#       m2 = Matrix([['Sx', 0], [0, 'Sy']])
# 
#       matrixg = Group(
#             m1,m2
#         ).arrange_in_grid(buff=0.5)
#       matrixg.shift(np.array([-2,-1,0]))
#       matrixg.scale(.75)
#       m0.scale(.75)
#       m0.shift(np.array([0.5,-1,0]))
#       self.add(matrixg)
#       self.wait(2)
#       self.add(m0)
#       text6=Text("Multiplying the first two matrix will result into the\nthird matrix which is your resultant!", font_size=20, color=BLUE)
#       box6 = SurroundingRectangle(text6, color=YELLOW, buff=MED_LARGE_BUFF)
#       gpx=VGroup(box6,text6)
#       gpx.shift(np.array([-2,-3,0]))
#       self.play(Write(gpx), run_time=4)
# 
# 
# 
#     
# 
# 
# 
#       self.wait(3)
#

# Commented out IPython magic to ensure Python compatibility.
# %%manim -p Transform4
# from manim import *
# 
# class Casper(VGroup):
#     def __init__(self):
#         super().__init__()
#         circle1 = Circle(color=BLUE, fill_opacity=.95)
#         circle2= Circle(color=WHITE, fill_opacity=1)
#         circle3= Circle(color=WHITE, fill_opacity=1)
#         square = Square()
#         triangle = Triangle(color=LIGHT_BROWN, fill_opacity=1)
#         triangle2 = Triangle()
#         
#         circle1.width=2
#         circle1.thickness=3
# 
#         circle2.scale(0.2)
#         circle2.set_stroke( width=1.25)
#         circle2.shift(LEFT* .5)
# 
#         
#         circle3.scale(0.2)
#         circle3.set_stroke( width=1.25)
#         circle3.shift(RIGHT* .5)
# 
#         circle4 = Circle(color=BLACK, fill_opacity=.75)
#         circle4.scale(0.155)
#         circle4.set_stroke( width=1.25)
#         circle4.shift(LEFT* .55)
# 
#         circle5=Circle(color=BLACK, fill_opacity=.75)
#         circle5.scale(0.155)
#         circle5.set_stroke( width=1.25)
#         circle5.shift(RIGHT* .45)
#         
#         square.shift(DOWN *1.75)
#         square.scale(.75)
# 
#         triangle.shift(UP *.65, RIGHT *.42)
#         triangle.scale(.95)
#         triangle.rotate(1.5)
#         triangle.border=2
# 
#         triangle2.shift( DOWN* 2)
#         triangle2.rotate(PI)
#         triangle2.scale(.45)
# 
#         smile = Arc(angle=.75*PI, radius=.2)    
#         smile.rotate(1.15*PI)
#         smile.shift(DOWN * .65)   
# 
#         
#         a = [2, 0, 0]
#         b = [0, 1.75, 0]
#         c = [0, 0, 1.75]
#         
#         ap1 = ArcPolygon(a, b, c, radius=2, color=BLUE, fill_opacity=.75)
#         
#         ap_group = VGroup(ap1).arrange()
#         ap_group.shift(DOWN * 1.75)
#         ap_group.rotate( 1.65* PI * .75)
# 
#         self.add(ap_group, triangle2, circle1, circle2, circle3, circle4, circle5, triangle, smile)
# 
# class Transform4(Scene):
#     def construct(self):
#       number_plane = NumberPlane(
#             background_line_style={
#                 "stroke_color": TEAL,
#                 "stroke_width": 4,
#                 "stroke_opacity": 0.6
#             }
#         ).add_coordinates()
#       self.play(Create(number_plane), run_time=4)
#       self.wait(2)
#       arrow5=Arrow(start=np.array([0,0,0]), end=np.array([3,3,0]))
#       self.play(GrowArrow(arrow5),  run_time=3)
#       self.wait(2)
#       casp=Casper()
#       casp.shift(np.array([3,3,0]))
#       casp.scale(.5)
#       self.play(Create(casp))
#       self.wait(2)
#       self.remove(arrow5)
#       line1=Arrow(start=np.array([0,0,0]), end=np.array([3,3,0]), color=RED)
#       line2=Arrow(start=np.array([0,0,0]), end=np.array([-3,3,0]), color=GREEN)
#       self.wait(2)
#       self.add(line1)
#       text99=Text("Suppose Casper is at position 3,3 wants to\nrotate to -3,3. In that Case\nAngle Between Red line and Green line is 90 degrees.", font_size=20, color=BLUE)
#       box99=BackgroundRectangle(text99, color=BLACK,buff=MED_LARGE_BUFF)
#       gbox=VGroup(box99, text99)
#       gbox.shift(np.array([-3,-3,0]))
#       self.wait(2)
#       self.play(Create(gbox), run_time=4)
#       self.wait(2)
#       self.play(casp.animate.rotate(angle=.5*PI,about_point=ORIGIN), run_time=5)
#       self.wait(2)
#       self.add(line2)
#       self.wait(4)
#      
#       coordinate1=Text("X,Y", font_size=30)
#       coordinate1.shift(np.array([-3.5,3.5,0]))
#       coordinate2=Text("x,y", font_size=30)
#       coordinate2.shift(np.array([3.5,3.5,0]))
# 
#       coordinate3=Text("θ", font_size=30)
#       coordinate3.shift(np.array([1.25,.5,0]))
#       coordinate4=Text("90°", font_size=30)
#       coordinate4.shift(np.array([.5,1.5,0]))
# 
#       self.add(coordinate1,coordinate2,coordinate3,coordinate4)
#       self.wait(2)
#       self.play(Uncreate(casp))
#       self.wait(2)
# 
#       self.remove(gbox)
#       text99=Text("Using Projection:\nX=r cos (90° + θ)\nY=r sin (90° + θ)\nr=Distance of casper from origin", font_size=20, color=BLUE)
#       box99=BackgroundRectangle(text99, color=BLACK,buff=MED_LARGE_BUFF)
#       gbox=VGroup(box99, text99)
#       gbox.shift(np.array([-3,-3,0]))
#       
#       self.wait(2)
#       self.play(Create(gbox))
#       self.wait(3)
#       self.remove(line1,line2, coordinate1, coordinate2,coordinate3, coordinate4)
#       self.wait(2)
#       self.play(Uncreate(number_plane))
#       self.wait(2)
#       self.play(gbox.animate.to_edge(UP))
#       how=Text("How to easily represent it in more simple way?\nSimple!\nUse matrix multiplication to identify transformation", font_size=20)
#       bb=SurroundingRectangle(how, color=YELLOW, buff=MED_LARGE_BUFF)
#       gbox1=VGroup(bb,how)
#       gbox1.shift(np.array([-2,-0,0]))
#       z=Casper()
#       z.scale(.65)
#       z.shift(np.array([2,-1,0]))
#       self.play(Create(gbox1))
#       self.wait(2)
#       self.add(z)
#       self.wait(4)
#       self.remove(gbox)
#       self.wait(2)
#       self.play(gbox1.animate.to_edge(UP))
#       self.wait(2)
#       self.play(z.animate.to_edge(RIGHT))
#       self.wait(2)
#       ff=Text("Transformation!", font_size=25)
#       ff.shift(np.array([-2,0,0]))
#       self.add(ff)
#       self.wait(2)
#       m0 = Matrix([['X'], ['Y']])
#       m1 = Matrix([['x'], ['y']])
#       m2 = Matrix([["cos θ", "sin θ"], ["-sin θ", "cos θ"]])
#       g = Group(
#             m1,m2
#         ).arrange_in_grid(buff=0.5)
#       g.scale(.75)
#       g.shift(np.array([-2,-1,0]))
#       self.add(g)
# 
#       fff=Text("Final Matrix!", font_size=25)
#       fff.shift(np.array([2,0,0]))
#       self.add(fff)
#       self.wait(2)
#       m0.scale(.75)
#       m0.shift(np.array([2,-1,0]))
#       self.add(m0)
# 
#       
#       self.wait(2)
# 
# 
#       self.wait(3)

